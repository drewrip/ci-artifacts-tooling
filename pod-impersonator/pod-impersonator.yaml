apiVersion: v1
kind: Pod
metadata:
  annotation:
    alpha.image.policy.openshift.io/resolve-names: '*' # allows specifying an imagestreamtag as image
  name: pod-impersonator-ssh-server
  labels:
spec:
  containers:
  - name: cnt
    command:
    - bash
    args:
    - -c
    - |
      chmod 600 ${HOME}/custom_ssh/ssh_host_*_key;
      mkdir /var/empty/sshd
      ssh-keygen -f ${HOME}/.ssh/id_rsa -b 2048 -t rsa  -q -N ''
      echo "$PUBLIC_KEY" > ${HOME}/.ssh/authorized_keys
      /usr/sbin/sshd -D -e
    image: pod-impersonator:ssh
    securityContext:
      allowPrivilegeEscalation: false
      runAsRoot: false
      runAsUser: 1000
      capabilities:
        drop: ["ALL"]
      seccompProfile:
        type: RuntimeDefault
    ports:
    - containerPort: 9090
      name: https
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /oauth/healthz
          port: 9090
          scheme: HTTPS
        initialDelaySeconds: 30
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 1
    volumeMounts:
    - mountPath: /var/empty/
      name: var-sshd
      defaultMode: 0700
    env:
    - name: PUBLIC_KEY
      value: "<SSH public key inserted here>"
  volumes:
  - name: var-sshd
    emptyDir: {}
# oc rsh pod/pod-impersonator-ssh-server bash -c "cat > .ssh/authorized_keys" < .ssh/id_rsa.pub
# oc port-forward pod/pod-impersonator-ssh-server 2222:2222
# ssh -R 8443:localhost:8050 1000@localhost -p2222
# oc get secrets/odh-notebook-controller-webhook-cert -oyaml | yq '.data["tls.crt"]' -r | base64 -d > /tmp/k8s-webhook-server/serving-certs/tls.crt
# oc get secrets/odh-notebook-controller-webhook-cert -oyaml | yq '.data["tls.key"]' -r | base64 -d > /tmp/k8s-webhook-server/serving-certs/tls.key
